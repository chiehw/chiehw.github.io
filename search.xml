<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue-devtools-next 背后的原理</title>
      <link href="/2024/03/07/vue-devtools-next-source-read/"/>
      <url>/2024/03/07/vue-devtools-next-source-read/</url>
      
        <content type="html"><![CDATA[<h1 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h1><p>在往下阅读之前我们需要先了解几个基本概念，<code>client</code> 指 devtools 中的 UI 界面，<code>user-app</code> 指被调试的 Vue 项目，<code>vite-server</code> 指 vite 服务。目前 devtools-next 还处于项目初期，项目中有一些文件夹作用不是很大，我根据自己阅读源码后将一些关键文件夹列出来。在下面的列表中，靠上方的子项目通常依赖于靠下方的子项目：</p><ul><li>vite：vite 的插件作为 devtool-next 的入口。</li><li>client：devtools 的主要界面，负责和 <code>user-app</code> 和 <code>vite-server</code> 通信。<code>vite-server</code> 负责提供文件相关的 rpc 服务，<code>user-app</code> 提供调试相关的服务（查看和修改组件变量）。 </li><li>overlay：为 <code>client</code> 提供容器，负责唤醒 client 以及提供调整 UI 大小的功能。</li><li>core：为 <code>client</code>、<code>user-app</code>、<code>vite-server</code> 提供 RPC 支持、实现事件回调机制。</li><li>devtool-kit：核心功能实现。</li></ul><p>此外，还有一些子项目专门提供公共函数签名以及常量：</p><ul><li>shared：共用的工具类、常量。</li><li>scheme：UI 相关的公共函数、常量。</li><li>devtools-api：为插件提供 API 声明，主要实现在 devtools-kit 中。</li></ul><p>最后 playground 内置了一些简单的功能，可以用来更方便的测试 devtools-next，因为该子项目在 package.json 中直接使用了当前 workspace 的 devtools-next。</p><h1 id="数据流向图"><a href="#数据流向图" class="headerlink" title="数据流向图"></a>数据流向图</h1><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/picgo/image-20240225235009167.png" alt="image-20240225235009167" width="500px"/><p>在深入了解之前，先了解模块之间的相互关系会更清晰。User-App 和 Devtools Client 会通过 postMessage 或者 BroadcastChannel 来交换数据。Devtools Client 会通过 websocket 和 Vite Server 交换数据，相互进行 rpc 调用。</p><p>当 Devtools Client 以 iframe 嵌入到 User-App 中时，使用 postMessage 通信，postMessage 是 window 对象上的一个方法，可以安全的实现跨源通信。当 Devtools Client 以分离窗口的方式呈现时，使用 BroadcastChannel 通信，BroadcastChannel 可以让同源的不同窗口进行通信。</p><blockquote><p>PS：User-App 也会和 Vite Server 交换数据，但是不属于 Devtools Next 的研究范畴，所以没有在上图中画出来。</p></blockquote><h1 id="User-App"><a href="#User-App" class="headerlink" title="User-App"></a>User-App</h1><h2 id="载入-Devtools-Frame"><a href="#载入-Devtools-Frame" class="headerlink" title="载入 Devtools Frame"></a>载入 Devtools Frame</h2><p>Devtools Next 的配置非常简单，只需要在 vite 插件中引入即可，无需修改项目代码来引入 Client 的源码，那它是怎么做到的呢？在 <code>packages/vite/src/vite.ts</code> 中，可以看到如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> plugins = &#123;</span><br><span class="line">    <span class="title function_">transformIndexHtml</span>(<span class="params">html</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">        <span class="attr">attrs</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;module&#x27;</span>,</span><br><span class="line">          <span class="attr">src</span>: <span class="string">`<span class="subst">$&#123;config.base || <span class="string">&#x27;/&#x27;</span>&#125;</span>@id/virtual:vue-devtools-path:overlay.js`</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="title function_">transform</span>(<span class="params">code, id</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">        code = <span class="string">`<span class="subst">$&#123;code&#125;</span>\nimport &#x27;virtual:vue-devtools-path:overlay.js&#x27;`</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也就是说，它通过 vite 的钩子在 html 中添加标签，或在代码中加载 overlay.js 文件来引入 Overlay、Client，随之完成一系列的初始化操作。</p><h2 id="获取根组件"><a href="#获取根组件" class="headerlink" title="获取根组件"></a>获取根组件</h2><p>在 overlay.js 文件中通过 <code>devtools.init()</code> 来初始化全局的变量，如 <code>__VUE_DEVTOOLS_GLOBAL_HOOK__</code>，这个变量是获取 <code>Vue</code> 实例的关键点。在后文我们简称 <code>GLOBAL_HOOK</code>。</p><p>这里的 init 函数使用简单的发布-订阅机制的对象来初始化 <code>GLOBAL_HOOK</code>，这个对象实现了 on、off、once、emit 等方法，并且在这个对象上使用 on 函数设置了相关的事件回调，Vue 实例可以使用这个对象的 emit 方法来通知 devtools-next，下面是一些相关的 HOOK 名称：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> enum <span class="title class_">DevToolsHooks</span> &#123;</span><br><span class="line">  <span class="comment">// internal</span></span><br><span class="line">  <span class="variable constant_">APP_INIT</span> = <span class="string">&#x27;app:init&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">APP_UNMOUNT</span> = <span class="string">&#x27;app:unmount&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">COMPONENT_UPDATED</span> = <span class="string">&#x27;component:updated&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">COMPONENT_ADDED</span> = <span class="string">&#x27;component:added&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">COMPONENT_REMOVED</span> = <span class="string">&#x27;component:removed&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">COMPONENT_EMIT</span> = <span class="string">&#x27;component:emit&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">PERFORMANCE_START</span> = <span class="string">&#x27;perf:start&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">PERFORMANCE_END</span> = <span class="string">&#x27;perf:end&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">ADD_ROUTE</span> = <span class="string">&#x27;router:add-route&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">REMOVE_ROUTE</span> = <span class="string">&#x27;router:remove-route&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">RENDER_TRACKED</span> = <span class="string">&#x27;render:tracked&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">RENDER_TRIGGERED</span> = <span class="string">&#x27;render:triggered&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">APP_CONNECTED</span> = <span class="string">&#x27;app:connected&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">SETUP_DEVTOOLS_PLUGIN</span> = <span class="string">&#x27;devtools-plugin:setup&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue 会自动检测是否存在这个 <code>GLOBAL_HOOK</code>，如果存在就会在上面的 HOOK 中调用其 emit 方法来通知 devtool，且Vue 会将根组件赋值给这个全局变量。我们可以在 vue&#x2F;core 项目中找到相关的代码：<a href="https://github.com/vuejs/core/blob/f66a75ea75c8aece065b61e2126b4c5b2338aa6e/packages/runtime-core/src/renderer.ts#L340">检测 GLOBAL_HOOK</a>、<a href="https://github.com/vuejs/core/blob/f66a75ea75c8aece065b61e2126b4c5b2338aa6e/packages/runtime-core/src/devtools.ts#L89">emit 事件</a>。</p><p>利用上面的基本原理，我们可以在生产环境下也打开 devtools。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">openVue3</span>(<span class="params">app_id = <span class="string">&#x27;#app&#x27;</span></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> devtools = <span class="variable language_">window</span>.<span class="property">__VUE_DEVTOOLS_GLOBAL_HOOK__</span></span><br><span class="line">    <span class="keyword">const</span> app = $(app_id).<span class="property">__vue_app__</span></span><br><span class="line">    <span class="keyword">const</span> type = &#123;</span><br><span class="line">      <span class="title class_">Comment</span>: <span class="title class_">Symbol</span>(<span class="string">&quot;Comment&quot;</span>),</span><br><span class="line">      <span class="title class_">Fragment</span>: <span class="title class_">Symbol</span>(<span class="string">&quot;Fragment&quot;</span>),</span><br><span class="line">      <span class="title class_">Static</span>: <span class="title class_">Symbol</span>(<span class="string">&quot;Static&quot;</span>),</span><br><span class="line">      <span class="title class_">Text</span>: <span class="title class_">Symbol</span>(<span class="string">&quot;Text&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    devtools.<span class="title function_">emit</span>(<span class="string">&#x27;app:init&#x27;</span>, app, app.<span class="property">version</span>, type)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">openVue2</span>(<span class="params">app_id = <span class="string">&#x27;#app&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> devtools = <span class="variable language_">window</span>.<span class="property">__VUE_DEVTOOLS_GLOBAL_HOOK__</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">Vue</span> = $(app_id).<span class="property">__vue__</span>.<span class="property">constructor</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="title class_">Vue</span>.<span class="property">super</span>) &#123; </span><br><span class="line">        <span class="title class_">Vue</span> = <span class="title class_">Vue</span>.<span class="property">super</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">devtools</span> = <span class="literal">true</span></span><br><span class="line">    devtools.<span class="title function_">emit</span>(<span class="string">&#x27;init&#x27;</span>, <span class="title class_">Vue</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接：</p><ul><li>强制打开线上 Vue 3 项目 Devtools 工具的一种方法：<a href="https://juejin.cn/post/7052955565944733709">https://juejin.cn/post/7052955565944733709</a></li><li>开启vue项目生产环境的 Vue Devtools：<a href="https://juejin.cn/post/7081911875054600199">https://juejin.cn/post/7081911875054600199</a></li><li>enable-vue-devtools：<a href="https://github.com/EHfive/userscripts/blob/master/userscripts/enbale-vue-devtools/src/main.js">https://github.com/EHfive/userscripts/blob/master/userscripts/enbale-vue-devtools/src/main.js</a></li></ul><h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><h2 id="如何将页面嵌入到已有项目中的？"><a href="#如何将页面嵌入到已有项目中的？" class="headerlink" title="如何将页面嵌入到已有项目中的？"></a>如何将页面嵌入到已有项目中的？</h2><p>这个功能的核心代码在 overlay 项目中，其中 createDevToolsContainer 函数会在 body 中添加一个 id 为 <code>__vue-devtools-container__</code> 的 div 标签。然后将 overlay 这个 app 挂载到 <code>__vue-devtools-container__</code>。</p><h2 id="如何将-overlay-和-client-两个项目的-UI-结合？"><a href="#如何将-overlay-和-client-两个项目的-UI-结合？" class="headerlink" title="如何将 overlay 和 client 两个项目的 UI 结合？"></a>如何将 overlay 和 client 两个项目的 UI 结合？</h2><p>在 overlay 中有一个函数叫做 useIframe 会创建一个 id 为 <code>vue-devtools-iframe</code> 的 iframe。这个函数的参数是 clientUrl，会最终指向这个 client 编译后的地址，client 项目只需要编译后以静态文件挂载即可。</p><h2 id="事件回调"><a href="#事件回调" class="headerlink" title="事件回调"></a>事件回调</h2><p>在 devtool-kit 实现了 devtool 的事件循环，其核心运用了 <code>hookable</code>。为什么要使用这个库进行事件回调？让函数能更灵活的，而不是硬编码。</p><h2 id="如何实现-rpc？"><a href="#如何实现-rpc？" class="headerlink" title="如何实现 rpc？"></a>如何实现 rpc？</h2><p>vite-dev-rpc 提供了 createRPCServer 方法，可以传入参数来注册 rpc 函数。例如 <code>setupAssetsRPC</code> 会返回 getStaticAssets 函数，然后将这个函数注册到 server 端。再使用其提供的 createRPCClient 方法，创建 rpcClient，就可以调用远程的方法。更深层的原理需要继续阅读 vite-dev-rpc 的源码。</p><h2 id="如何实现布局放大和缩小？"><a href="#如何实现布局放大和缩小？" class="headerlink" title="如何实现布局放大和缩小？"></a>如何实现布局放大和缩小？</h2><p>布局的核心源码在 overlay 中的 FrameBox 文件中，当在侧边栏点击鼠标左键时，标志位 isResizing 置为 true。使用事件监听器监听 <code>mousemove</code> 事件，根据窗口的位置来重置 localStore 中的高宽。</p><p>接下来可以看 <code>postion.ts</code> 文件中的代码，usePosition 可以传入 HTMLElement，然后将节点的高宽和 localStore 中高宽进行响应式的绑定。</p><h2 id="如何查看-vue-组件中的变量？"><a href="#如何查看-vue-组件中的变量？" class="headerlink" title="如何查看 vue 组件中的变量？"></a>如何查看 vue 组件中的变量？</h2><p>在 client 的 pages 文件夹下，components 负责这部分代码的调用和展示，查看调用链，最终可以追踪到 <code>getInspectorState</code> 函数的参数 inspectorId 为 components。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getComponentState</span>(<span class="params">id: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  bridgeRpc.<span class="title function_">getInspectorState</span>(&#123; <span class="attr">inspectorId</span>: <span class="string">&#x27;components&#x27;</span>, <span class="attr">nodeId</span>: id &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    activeComponentState.<span class="property">value</span> = <span class="title function_">normalizeComponentState</span>(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 INSPECTOR_ID 可以找到 registerComponentsDevTools 函数，这个函数注册了相关的处理方法，核心的处理方法为 <code>getComponentTree</code>。这个函数的参数为 <code>VueAppInstance</code>，可以传入 Vue 实例，然后遍历这棵实例树。</p><h2 id="如何实现编辑数据？"><a href="#如何实现编辑数据？" class="headerlink" title="如何实现编辑数据？"></a>如何实现编辑数据？</h2><p>同样也是在 devtool-kit 文件夹下，editInspectorState 函数负责修改 Vue 组件中的数据。最终会调用 editComponentState 函数。最终由 StateEditor 来实现状态的修改。</p><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p><strong>需要 Vite 支持 websocket</strong>。从 vite 2.9 提供了 <a href="https://vitejs.dev/guide/api-plugin#client-server-communication">Client-server Communication</a>，提供了客户端和服务端交互的工具。在 vite 的插件中，可以获取 websocket server，可以发送消息给所有的客户端。这样我们就可以轻松的获得 websocket 链接。在 client 中使用 <code>import.meta.hot</code> 获取 websocket 的 client。在 vite.config.ts 中， <code>configureServer(server)</code> 函数的 server.ws 就是 websocket 的 server。</p><p><strong>基于 websocket 的 rpc 框架 birpc</strong>。这是一个轻量的 rpc 框架，<a href="https://github.com/antfu/vite-dev-rpc">vite-dev-rpc</a> 将其和 <code>vite-hot-client</code> 做了封装，只需要使用 rpc client 即可调用服务端的函数。传递的消息格式如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;m&quot;</span>: <span class="string">&quot;add&quot;</span>, <span class="comment">// 方法名</span></span><br><span class="line">  <span class="string">&quot;a&quot;</span>: [<span class="comment">// 参数</span></span><br><span class="line">    <span class="number">97</span>,</span><br><span class="line">    <span class="number">41</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;i&quot;</span>: <span class="string">&quot;99Rbl9Im3PpZzBTlpbwSx&quot;</span>,</span><br><span class="line">  <span class="string">&quot;t&quot;</span>: <span class="string">&quot;q&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bridge-类"><a href="#Bridge-类" class="headerlink" title="Bridge 类"></a>Bridge 类</h2><p>这个类利用了适配器模式来封装 mitt 库，用于管理 JavaScript 中的事件。client 的事件都由 BridgeRpc 来转发，在 <code>registerBridgeRpc</code> 函数中注册处理函数。</p><h2 id="跨文档消息-XDM-Cross-Document-Messaging"><a href="#跨文档消息-XDM-Cross-Document-Messaging" class="headerlink" title="跨文档消息 XDM(Cross-Document-Messaging)"></a>跨文档消息 XDM(Cross-Document-Messaging)</h2><p>在 devtools-next 中，使用 iframe 将 devtool client 的页面嵌入到用户的 HTML 中，用户的 app 和 devtool 的 app 需要通信的话，就需要用到 XDM 这项技术。在 overlay 中使用 postMessage 来通知 devtools app 初始化 devtool。</p><p>overlay 会被提前注入到用户程序中，等待 devtools app 加载完成后，再通过 postMessage 来通知 devtools app 启动。</p><p>在分离窗口的时候，使用 BroadcastChannel 来进行通信。在子页面中，使用 postMessage 通信。</p><h2 id="查看和编辑组件信息"><a href="#查看和编辑组件信息" class="headerlink" title="查看和编辑组件信息"></a>查看和编辑组件信息</h2><p>在 devtoolsBridge 类中，有两种 rpc。第一种是 viteRpc 用于和 vite 交互，获取服务端的文件等信息。第二种 rpc 用于和 client 交互，用于获取组件信息。</p><h2 id="如何查看组件树"><a href="#如何查看组件树" class="headerlink" title="如何查看组件树"></a>如何查看组件树</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">api.<span class="property">on</span>.<span class="title function_">getInspectorTree</span>(<span class="keyword">async</span> (payload) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (payload.<span class="property">app</span> === app &amp;&amp; payload.<span class="property">inspectorId</span> === <span class="variable constant_">INSPECTOR_ID</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> instance = <span class="title function_">getComponentInstance</span>(devtoolsContext.<span class="property">appRecord</span>!, payload.<span class="property">instanceId</span>)</span><br><span class="line">    <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">      <span class="keyword">const</span> walker = <span class="keyword">new</span> <span class="title class_">ComponentWalker</span>(&#123;</span><br><span class="line">        <span class="attr">filterText</span>: payload.<span class="property">filter</span>,</span><br><span class="line">        <span class="comment">// @<span class="doctag">TODO:</span> should make this configurable?</span></span><br><span class="line">        <span class="attr">maxDepth</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">recursively</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">      payload.<span class="property">rootNodes</span> = <span class="keyword">await</span> walker.<span class="title function_">getComponentTree</span>(instance)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>核心源码在 user-app.ts 和 components.ts。在 <code>vueAppInit</code> 函数中，保存 Vue 的实例。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS：轻松解决层叠优先级</title>
      <link href="/2024/02/07/css-the-best-way-to-fix-cascading-prioprities/"/>
      <url>/2024/02/07/css-the-best-way-to-fix-cascading-prioprities/</url>
      
        <content type="html"><![CDATA[<p>写 CSS 的人都一定遇到过，为什么我的这个样式没有生效？打开开发者工具一看，自己的 CSS 选择器确实选中了这个样式，但是自己的样式被其他的选择器覆盖了。最佳的解决办法就是调整优先级，让我们来看看怎么做。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>下面我们来看一个非常简单的案例：</p><iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/chiehw/embed/dyrZxzE?default-tab=html%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/chiehw/pen/dyrZxzE">  Untitled</a> by Chieh Wang (<a href="https://codepen.io/chiehw">@chiehw</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe>假设我们需要让这个 `title`  改为红色的背景，我们可能会写出如下代码<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时就会产生疑惑了，为什么我设置的背景色没有生效？打开 F12 开发者工具，然后检查元素后就会知道真相：</p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/picgo/css-devtools" alt="image-20240128094835435" width="500px" /><p>将鼠标放在 CSS 选择器上，就可以显示该选择器的优先级：</p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/picgo/202401280952220.png" alt="image-20240128095209443" width="500px" /><p>可以简单的先将上面的<code>明确性：(1, 0, 0)</code>当成 100，下面的 <code>明确性：(0,1,0)</code>，当成 10，这样就能很容易的对比两个选择器的优先级的。</p><p>我们通常的编程环境是 VSCode，在 VSCode 中也可以将鼠标悬浮在选择器上，会得到同样的优先级：</p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/picgo/image-20240128100037091.png" alt="image-20240128100037091" width="400px" /><p>这样做有什么好处呢？我们可以直观的知道自己的 CSS 选择器的优先级，从而写出更适合当前元素的选择器。这里的案例比较简单，了解原理后就能口算了。当涉及伪选择器、或更复杂的选择器时就能充分体现这种方法的优势了。</p><p>最后为我们给选择器添加上 <code>#page-title</code>，就能得到更高优先级的选择器了。</p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/picgo/image-20240128100911274.png" alt="image-20240128100911274" width="400px" /><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>这里摘抄一下《深入解析 CSS》对于优先级标记的描述：</p><blockquote><p>一个常用的表示优先级的方式是用数值形式来标记，通常用逗号隔开每个数。比如，“1,2,2” 表示选择器由 1 个 ID、2 个类、2 个标签组成。优先级最高的 ID 列为第一位，紧接着是类，最后是标签。</p><p>选择器 <code>#page-header #page-title</code> 有 2 个 ID，没有类，也没有标签，它的优先级可以 用“2,0,0”表示。选择器 ul li 有 2 个标签，没有 ID，也没有类名，它的优先级可以用“0,0,2” 表示。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/picgo/image-20240128101331721.png" alt="image-20240128101331721"></p></blockquote><h2 id="important-规则"><a href="#important-规则" class="headerlink" title="important 规则"></a>important 规则</h2><p>不建议在这种情况使用  <code>!important</code> 。如果强行使用 <code>!important</code>，会让代码变得难以维护，有违《程序员的职业素养》中的&#x3D;&#x3D;不行损害之事&#x3D;&#x3D;。</p><p>更优雅的做法是将  <code>!important</code>  放在合适的工具类中，例如 hidden 工具类。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hidden</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 基础回顾：层叠的基本概念</title>
      <link href="/2024/01/21/css-basic-cascade/"/>
      <url>/2024/01/21/css-basic-cascade/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在解决传统编程问题时，你能通过报错或关键字来搜索，但在解决 CSS 问题时却很难搜索，因为样式之间相互关联，无法用一句简单的话来描述。CSS 会让你像下图一样抓狂：</p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/jpg/css.gif" alt="css" style="zoom:50%;" /><p>要掌握 CSS，一定要理解其基础原理（如层叠、盒模型、基本单位），并且深入理解。这篇文章主要讲解「层叠 cascade」。</p><h2 id="层叠的基本概念"><a href="#层叠的基本概念" class="headerlink" title="层叠的基本概念"></a>层叠的基本概念</h2><p>CSS 的全称是 Cascade Style Sheet。层叠 Cascade 指一系列规则。这些规则可以决定——<strong>当对同一个元素应用多个规则时，如何解决冲突</strong>。在我们编写 CSS 的时候，经常会发现自己编写的样式没有生效，很可能和「层叠」有关。</p><p>什么时候会出现对同一个元素应用多个规则时？下面举一个简单的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;page-title&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Wombat Coffee Roasters<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的 H1 标签就可能同时被多种选择器选中，最终只有 <code>#page-title</code> 生效。这里的例子只是层叠的一种类型——「优先级」。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: monospace;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优先级、层叠顺序"><a href="#优先级、层叠顺序" class="headerlink" title="优先级、层叠顺序"></a>优先级、层叠顺序</h2><p>层叠有三种常见的规则：优先级、层叠顺序。</p><p>优先级（<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade#cascading_order">Cascading order</a>）是最常见的一种层叠。它和 CSS 选择器紧密结合，将高优先级的样式应用到元素上。规则如下图所示，具体细节将在后面的文章展开。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/jpg/cascading-order.png" alt="image-20240121225942130"></p><p>层叠顺序（Stacking）类似与 PS 中的图层，假设两个元素在屏幕的同一个位置，层叠顺序将决定哪个元素在上面。默认规则如下图所示，可以使用 z-index 属性进行调整。</p><p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/jpg/stacking-order.png" alt="img"></p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p><mark>一本书读十遍，读十本书</mark>。高中的时候，老师常说要回归课本，最近和前面那句话有相似的含义。在深入另一个领域之前，选取一本书作为课本，尽量将这本书读十遍，同时也大量阅读其他书籍（相关的）来完善这本书未提及的内容。按照这样的方式学习，可以拥有一个很扎实的知识体系。</p><p><a href="https://book.douban.com/subject/35021471/">《深入解析 CSS》</a>这本书可以作为 CSS 这一领域的课本。我的博文也正是基于这本书做拓展，将书中的内容进行补充和完善，所以我将会写一个系列的文章，欢迎👏🏻关注和讨论。</p><p>博客原文：<a href="https://chieh.wang/2024/01/21/css-basic-cascade/">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 年终总结 | 一位普通打工人的思考</title>
      <link href="/2024/01/15/2023-year-end-summary/"/>
      <url>/2024/01/15/2023-year-end-summary/</url>
      
        <content type="html"><![CDATA[<p>时光似箭，日月如梭。我从毕业（2022 年 7 月）到现在已经一年半，我的生活刚刚开始。为什么呢？从大学开始，我好像一只在海中迷路的船，随风飘着。但最近我找到了自己的灯塔，稍许准备之后，向着目标开始起航。</p><h2 id="时间胶囊"><a href="#时间胶囊" class="headerlink" title="时间胶囊"></a>时间胶囊</h2><p>先简单回顾一下我从 2018 年到 2023 年的整个经历和心路历程：</p><ul><li>2018 年 9 月 - 2022 年 6 月。我的技术栈大致涵盖爬虫、算法、前端、后端、Linux、安全、Rust。当面临就业选择时，我是迷茫的，我要到哪去？</li><li>2022 年 6 月毕业后。在 RustDesk 远程实习过一段时间，主负责键盘问题，我提出将键盘模拟拆分为两种新的键盘模式（Map Mode 和 Translate Mode），现在都是 RustDesk 中核心的键盘模式。老板和带我的龙哥都挺对我来非常耐心，但在家里办公会有种种干扰，甚至还有很多异样的目光，老是没办法集中精力来完成工作（后半段实习表现不太好，键盘的工作最后还交给了龙哥，还蛮对不起的）。年后就一直在家里的小店帮忙，直到 5 月淡季后开始找工作。这时候的我愈加迷茫。那时候的我只有一个想法尝试投简历，解决基本生活问题——最后进了一家 20 人的公司。</li><li>2023 年 7 月 - 2024 年 1 月。这六个月里，我主要负责的是前端，但公司里的开发流程很混乱（产品直接把大致想法给开发，经常性 Break Change），每天都很心累。好在我在工作之余并没有闲着，通过看视频、阅读书籍和文章，我找到了自己的灯塔，知道应该如何思考和行动了，后面会继续探讨这个话题。</li></ul><h2 id="如何思考和行动"><a href="#如何思考和行动" class="headerlink" title="如何思考和行动"></a>如何思考和行动</h2><p><mark>反抗荒谬</mark>。源于 —— 《西西弗神话》，西西弗斯可以指代我们每一个人。</p><blockquote><p>西西弗斯因惹怒宙斯而遭责罚。但他在下地狱前逃离到人间，并尽情地体验美好的事物。最终他被捕获，被众神处以永远的惩罚：西西弗斯必须把一块石头推上山，到石头达顶部时，将再次滚回山下，西西弗斯又重新开始。加缪认为西西弗斯是一个荒诞的英雄，他热爱并穷尽一切方法让生活充实，讨厌死亡，反抗诸神。当他承认他任务的无意义和命运的确定性时，他意识到自己处境的荒谬，但他直视这种荒谬，并借由<strong>反抗荒谬</strong>而感到充实。“应该认为，西西弗斯是幸福的。—— <a href="https://zh.wikipedia.org/wiki/%E8%A5%BF%E7%BB%AA%E5%BC%97%E6%96%AF%E7%A5%9E%E8%AF%9D">西西弗神话 Wiki</a></p><p>世界上只有一种英雄主义，那就是认清生活的真相后依然热爱生活。——罗曼·罗兰</p></blockquote><p>考好高中、考好大学、找好工作，每个目标就像是山顶，麻木的做着，当某一天蓦然回首，发现这一切都好荒谬，没有意义。人生没有意义，天天那么累，我为什么不去看电视或打游戏呢（像个三和大神一样）？加缪的西西弗神话让我意识到反抗荒谬比任由石头滚下更有意义，更有乐趣。天天蜷缩在房间里打游戏是一种令人感到可悲的生活方式（除非你致力于成为职业选手，职业选手大概率也需要较为专业的训练）。</p><img src="https://blog-1256032382.cos.ap-nanjing.myqcloud.com/jpg/dragon.jpg" alt="dragon" style="zoom:50%;" /><p>我决定要对抗荒谬，我需要做什么呢？我需要怎么做呢？我的直觉是，我需要找到一个山顶（目标），然后爬上去（去做），与上图如出一辙。</p><p><mark>构建体系、边际改进</mark>。源于 —— <a href="https://www.bilibili.com/video/BV1hu4y1w7af/">TED精选 | 我如何实现一个又一个看似遥不可及的目标？</a> 、 《掌控习惯》</p><p>我这里只摘录一点核心思想：</p><ul><li>体系和目标是有区别的，目标是关于你想要达到的结果，而体系是涉及导致这些结果的过程。</li><li>专注体系构建的过程中，我们也能更容易获得反馈，我们能很容易感知到进步还是退步。但是如果我们只专注结果，就会一直心想“一旦我实现了那个目标，我就会很快乐。</li><li>精益求精，每次追求微小的进步。</li><li><strong>目标的意义在于确定大方向，但体系会促进你的进步</strong>。假如你为目标绞尽脑汁，却对体系设计关注不足的话，就会出现一些问题。</li></ul><p>仔细回想，过去的我找到一个目标之后，就长时间只关注这个目标（可能只有几个月），当处于倦怠期的后就会去做其他事情。这样就会导致，我会做很多事情，但是实际上什么也不精通。精通和会的区别就在于，对于细节的把控，而我还没深入细节就已经转入另一个方向了。</p><p>曾经《Python3 网络爬虫开发实战》作者的经历给了我深深的震撼，他才刚大学毕业，就写了这本书，而且入职微软，对爬虫很多方方面面都特别了解。当时的我尤为震惊，心中充满了疑问，他为什么能一直学那么久的爬虫？他是怎么思考的？结合现在这两种习惯，我能理解了，并且表示敬佩。假设我现在回到五年前，我会完整的学完爬虫，并且在现有的爬虫教程的基础上进行改进，一直保持这个习惯，或许我也能写出这样一本书，又或者写出一个爬虫框架。</p><p><strong>知易行难，不知道更难</strong>。上面的两个观点是我行动的基本指南，接下来的任务就是去做具体的事，一步一个脚印的前进。</p><h2 id="聚焦现在"><a href="#聚焦现在" class="headerlink" title="聚焦现在"></a>聚焦现在</h2><blockquote><p>种一棵树最好的时间是十年前，其次是现在。—— 《<a href="https://book.douban.com/subject/5348650/">援助的死亡</a>》</p></blockquote><ul><li><p>德语。看完 <a href="https://www.bilibili.com/video/BV1hu4y1w7af/">TED精选 | 我如何实现一个又一个看似遥不可及的目标？</a> 之后，我培养了第一个目标 - 学德语，当做培养信心的第一课。</p><ul><li>多邻国和德语助手 —— 累计学了 1600 个多单词，12000 分。</li><li>Super Easy German —— 听写 3 集。</li><li>《走遍德国》—— A1 已学习 50%。</li></ul></li><li><p>前端。网上各种负面情绪“前端技术层出不穷，学不完，培训班量产”，而我现在的观点是“最重要的不是你摸到什么牌，而是你能不能把手里的牌打好”，我现在已经摸到“前端”这张牌。</p><ul><li>《深入解析 CSS》 —— 已阅读 70%。</li><li>《程序员代码面试指南》—— 已阅读 10%。</li></ul></li><li><p>写作与表达。</p><ul><li>写作。从这篇文章开始，每周都会写一篇文章并发布（对比前面我草草发布的文章，就可以知道，我认真了！）。</li></ul></li></ul><h2 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h2><p>前两年看到了刘未鹏前辈写的文章<a href="http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/">《怎样花两年时间去面试一个人》</a>，读时眼前一亮，却无从下手。现在在看这篇文章，颇有远见，甚至还找到了现实的案例 —— <a href="https://greyli.com/job-hunting/">《李辉 - 待业五年后的找工作经历》</a>。招聘时，某个人的专业技能只是招聘考察的一部分，更多的是个人习惯，或者说是个人品质。优秀的个人品质会随着时间慢慢沉淀，这是一种无形的资产。乔帮主就是 Apple 公司最宝贵的资产，是 Apple 的灵魂。</p><p>现在的公司经常会有一些不合理的安排（把前端的人叫去学后端，等等），人心动荡，可能明年年后会有一波离职潮，我可能也会随着潮水离去。<strong>明年我希望自己能坚守现在的信念，培养我所欣赏的品质，再寻找适合这些品质生长的环境</strong>。</p><p>或许人生就在于精心培养和改进的习惯（体系），并享受这些习惯给你带来的快乐。最后引用一下我特别喜欢一句话：</p><blockquote><p>我们所度过的每一个平凡的日常，也许都是连续发生的奇迹。——《日常》</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
